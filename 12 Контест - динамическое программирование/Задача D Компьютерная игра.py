# Герою компьютерной игры нужно перебраться от одного края экрана к другому, перепрыгивая по платформам.
# При этом при прыжке с одной платформы на соседнюю, у героя уходит |y2-y1| единиц энергии, где y1 и y2 – высоты, на
# которых расположены эти платформы. Кроме того, у героя есть суперприем, который позволяет перескочить через платформу,
# но на это затрачивается 3*|y3-y1| единиц энергии. Конечно же, энергию следует расходовать максимально экономно.
# Вам известны высоты всех платформ в порядке от левого края до правого. Необходимо найти, какое минимальное количество
# энергии потребуется герою, чтобы добраться с первой платформы до последней.
# Ввод: 3\n\1\n5\n10 Вывод:9
# Ввод: 1\n1 Вывод: 0
def count_min_cost(n, price):
    c = [0] * (n)
    c[0] = 0
    if n == 1:
        print(c[0])
        return
    c[1] = abs(price[1] - price[0])

    for i in range(2, n):
        c[i] = min(abs(price[i] - price[i - 1]) + c[i - 1], 3 * abs(price[i] - price[i - 2]) + c[i - 2])
    print(c[-1])


n = int(input())
list1 = []
for i in range(n):
    list1.append(int(input()))
count_min_cost(n, list1)
