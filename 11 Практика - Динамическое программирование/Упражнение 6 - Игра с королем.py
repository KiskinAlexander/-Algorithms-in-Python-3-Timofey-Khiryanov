# Реализовать алгоритм поиска выигрышных и проигрышных позиций в аналогичной игре,
# но ходы делает король (только вправо, вниз и по диагонали).
def reset_diag_line_column(A, N, M):
    # Обнуляем диагональ , вертикаль и горизонталь если клетка не 0 или 2
    if N > 1 and M > 1:
        if A[N - 2][M - 2] != (0 or 2):
            A[N - 2][M - 2] = 0
        if A[N - 1][M - 2] != (0 or 2):
            A[N - 1][M - 2] = 0
        if A[N - 2][M - 1] != (0 or 2):
            A[N - 2][M - 1] = 0


M = int(input('Введите количество столбцов: '))
N = int(input('Введите количество строк: '))
A = [[1] * M for i in range(N)]
# идём от нижней правой клетки. Делаем из неё 2, строки, столбцы, диагонали обнуляем. Далее идём по всем элементам и обнуляем
for i in range(M - 1, -1, -1):
    for j in range(N - 1, -1, -1):
        if A[j][i] == 1:
            A[j][i] = 2
            reset_diag_line_column(A, j + 1, i + 1)
# распечатка матрицы
for i in range(len(A)):
    for j in range(len(A[i])):
        print(A[i][j], end=' ')
    print()
